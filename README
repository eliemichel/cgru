
/!\ Disclaimer: This branch is highly unstable and not supposed to work as is.
                Use it carefully, or switch back to master.

/!\ Warning: This branch has not been tested on Windows nor OSX. As it makes
             use of `epoll`, it will require some changes to run on these
             platforms.

Ongoing work
------------

Deliveryless system:
	The server does not initiate connections towards renders and monitors any
	more. It sends messages only as answers to clients heartbeat.

SocketPool:
	Server tries to keep connections alive as much as possible, managing them
	in a so called SocketPool object.

Logger:
	Logging system is being cleaned up. A unified style is applied in order to
	be easily read and/or parsed. Some potential features are on-the-fly
	verbosity switch, hierarchical log (indentation to see nested calls).

Fire and Forget messages:
	Instead of having broadcasted messages on one hand and "receiving" messages
	that wait for an answer, switch to a system where all messages are sent on
	one hand without caring about the response and responses are sent
	separately, with a "response ID" specifying to which original message this
	is an answer.


HOWTOs
------

Adding data to message header:
	I had to do it to add the ID/ResponseID system, and it may be useful later
	on as well.
	1. Add new attribute to Msg class
	2. Initialize it in Msg::construct() and the Msg ctors that don't call the
	   later.
	3. Edit Msg::rw_header
	4. Change the Msg::SizeHeader value at the beginning of msg.cpp
	5. Don't forget to call `rw_header( true);` when the new header is modified

Known bugs
----------

Many ERROR messages are actually correctly handled and so not fatal, especially
those related to networking.

If messages are sent to a non connected Render, behavior is undefined.

Many `af::Environment::getSocketPool().set` are a little ad-hoc. Even the
socket pool might need to be move somewhere else and stop being a global var.

When sending messages to a render, the code should refere to the render ID
instead of the raw address and resolution into an actual address should be
performed by the emitting queue.

Sometimes the server stops directly on start-up

Server does not handle SIGINT correctly (one of the threads keep on running)

When the task is terminated too quickly, the render has not propagated its ID
yet when the TTaskProgress Msg is sent.

Original README
---------------

Layout

afanasy
	Render farm manager.

bin
	General binaries.

doc
	HTML documentation.

examples
	Example scenes and scripts, testing scripts.

icons
	Icons

lib
	General library. Common scripts may used anywhere in the project.

plugins
	Plug-ins for different software.

software_setup
	Different software setup scripts to work with CGRU.

start
	CGRU applications launch scripts.

utilities
	Various utilities. Folder for anything else.

